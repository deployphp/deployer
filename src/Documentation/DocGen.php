<?php
/* (c) Anton Medvedev <anton@medv.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Deployer\Documentation;


use RecursiveDirectoryIterator;
use RecursiveIteratorIterator;
use RecursiveRegexIterator;
use RegexIterator;

class DocGen
{
    public $root;
    /**
     * @var DocRecipe[]
     */
    public $recipes = [];

    public function __construct(string $root)
    {
        $this->root = realpath($root);
    }

    public function parse(string $source)
    {
        $directory = new RecursiveDirectoryIterator($source);
        $iterator = new RegexIterator(new RecursiveIteratorIterator($directory), '/^.+\.php$/i', RecursiveRegexIterator::GET_MATCH);
        foreach ($iterator as [$path]) {
            $recipePath = str_replace($this->root . '/', '', realpath($path));
            $recipeName = preg_replace('/\.php$/i', '', basename($recipePath));
            $recipe = new DocRecipe($recipeName, $recipePath);
            $recipe->parse(file_get_contents($path));
            $this->recipes[$recipePath] = $recipe;
        }
    }

    public function gen(string $destination)
    {
        foreach ($this->recipes as $recipe) {
            $filePath = realpath("$destination/" . preg_replace('#\.php$#', '.md', $recipe->recipePath));

            $toc = '';
            $config = '';
            $tasks = '';
            if (count($recipe->require) > 0) {
                $toc .= "* Require\n";
                foreach ($recipe->require as $r) {
                    $toc .= "  * [`{$r}`](/{$r})\n";
                }
            }
            if (count($recipe->config) > 0) {
                $toc .= "* Config\n";
                $config .= "## Config\n";
                foreach ($recipe->config as $c) {
                    $toc .= "  * [`{$c->name}`](#{$c->name})\n";
                    $config .= "### {$c->name}\n";
                    $config .= "[Source](/{$c->recipePath}#L{$c->lineNumber})\n\n";
                    $config .= ($c->comment);
                    $config .= "\n\n";
                }
            }
            if (count($recipe->tasks) > 0) {
                $toc .= "* Tasks\n";
                $tasks .= "## Tasks\n";
                foreach ($recipe->tasks as $t) {
                    $toc .= "  * [`{$t->name}`](#{$t->name}) â€” {$t->desc}\n";
                    $tasks .= "### {$t->name}\n";
                    $tasks .= "[Source](/{$t->recipePath}#L{$t->lineNumber})\n\n";
                    $tasks .= $t->desc;
                    $tasks .= "\n\n";
                    $tasks .= ($t->comment);
                    $tasks .= "\n\n";
                }
            }

            $output = <<<MD
<!-- DO NOT EDIT THIS FILE! -->
<!-- Instead edit {$recipe->recipePath} -->
<!-- Then run bin/docgen -->

# {$recipe->recipeName}

[Source](/{$recipe->recipePath})

{$recipe->comment}

{$toc}
{$config}
{$tasks}
MD;


            if (!file_exists(dirname($filePath))) {
                mkdir(dirname($filePath), 0755, true);
            }
            file_put_contents($filePath, $output);
        }
    }
}

function trimComment($line)
{
    return preg_replace('#^(/\*\*?\s?|\s\*\s?|//\s)#', '', $line);
}

function indent($text)
{
    return implode("\n", array_map(function ($line) {
        return "  " . $line;
    }, explode("\n", $text)));
}
